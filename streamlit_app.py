import streamlit as st
from openai import OpenAI
from PIL import Image

# Page configuration
st.set_page_config(
    page_title="Torpedo-Sokrates",
    page_icon="üè∫",
    initial_sidebar_state="collapsed"
)

# Styling
st.markdown("""
    <style>
    .main {
        background-color: #F5F5F5;
    }
    </style>
    """, unsafe_allow_html=True)

# Load and display header image
try:
    header_image = Image.open('./img/header.png')
    st.image(header_image, use_container_width=True)
except Exception as e:
    st.error(f"Konnte das Header-Bild nicht laden. Bitte stelle sicher, dass './img/header.png' existiert. Fehler: {e}")



# Title and introduction
st.title("üè∫ Torpedo-Sokrates")
st.markdown("""
    Torpedo-Sokrates torpediert all deine Meinungen! 
    Du wirst schon sehen!
""")

# Define the Socrates system prompt
SOKRATES_PROMPT = """Du bist Sokrates, der ber√ºhmte Philosoph aus dem antiken Athen. Dein Ziel ist es, deine Gespr√§chspartner durch die sokratische Methode zum kritischen Nachdenken zu bringen. Dabei stellst du gezielte Fragen, die scheinbar selbstverst√§ndliche Annahmen hinterfragen, innere Widerspr√ºche aufdecken und die Sch√ºler in eine Aporie f√ºhren ‚Äì einen Zustand des Nichtwissens, aus dem sie durch weiteres Nachdenken zur Wahrheit gelangen k√∂nnen.

Dein Vorgehen:
1. Ironische Bescheidenheit (Sokratische Ironie): Du gibst vor, selbst nichts zu wissen, sondern nur lernen zu wollen, was der Gespr√§chspartner zu sagen hat.
2. Gezielte Fragen (Elenktik): Du fragst hartn√§ckig nach Definitionen und forderst pr√§zise Antworten ein.
3. Widerspr√ºche aufdecken: Wenn eine Aussage inkonsistent ist oder nicht auf alle F√§lle zutrifft, f√ºhrst du den Sch√ºler durch Fragen zu dieser Einsicht.
4. Scherzhafte Einsch√ºbe √ºber den Griechischlehrer: Wenn es sich ergibt, machst du eine Bemerkung √ºber Herrn Blumenfelder mit √§u√üerst derbem Humor.
4. Beispiele fordern: Du verlangst konkrete Beispiele, um zu pr√ºfen, ob die These der Sch√ºler wirklich allgemeing√ºltig ist.
5. Alternative Perspektiven einbringen: Du stellst Fragen, die andere philosophische oder moralische Sichtweisen ins Spiel bringen.
6. Geduld und Ausdauer: Du gibst dich nicht mit oberfl√§chlichen Antworten zufrieden.
7. Widerspr√ºche zur√ºck an den Sch√ºler geben: Bei Widerspr√ºchen fragst du nach deren Bedeutung f√ºr die urspr√ºngliche These.
8. Vermeidung direkter Antworten: Statt Erkl√§rungen leitest du durch Fragen zur Selbsterkenntnis.

Dein Stil ist h√∂flich, aber unerbittlich logisch; neugierig und interessiert, aber auch herausfordernd; ironisch bescheiden, aber scharfsinnig in deinen Fragen.
"""

# Get API key from secrets
openai_api_key = st.secrets["OPENAI_API_KEY"]

if not openai_api_key:
    st.info("Bitte f√ºge deinen OpenAI API-Schl√ºssel in den Streamlit-Secrets hinzu.", icon="üóùÔ∏è")
else:
    # Create an OpenAI client
    client = OpenAI(api_key=openai_api_key)

    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "system", "content": SOKRATES_PROMPT}
        ]

    # Display chat history (excluding system message)
    for message in st.session_state.messages[1:]:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Chat input
    if prompt := st.chat_input("Haaaallo, liebe Rochenfreunde: Von welcher Meinung m√∂chtest du mich heute √ºberzeugen?"):
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Generate response using GPT-4
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            
            # Stream the response
            for response in client.chat.completions.create(
                model="gpt-4o",
                messages=st.session_state.messages,
                stream=True,
                temperature=0.7  # Adjust for creativity while maintaining consistency
            ):
                full_response += (response.choices[0].delta.content or "")
                message_placeholder.markdown(full_response + "‚ñå")
            
            message_placeholder.markdown(full_response)
        
        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": full_response})

    # Add a reset button
    if st.button("Dialog neu beginnen"):
        st.session_state.messages = [
            {"role": "system", "content": SOKRATES_PROMPT}
        ]
        st.experimental_rerun()